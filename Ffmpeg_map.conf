$FFMPEG = {
	  title => {
		    cmd => 'title',
		   },
	  author =>  {
		    cmd => 'author',
		   },
	  copyright =>  {
		    cmd => 'copyright',
		   },
	  comment =>  {
		    cmd => 'comment',
		   },
	  year =>  {
		    cmd => 'year',
		   },
	  duration => {
		       cmd => 't',
		      },
	  seek => {
		   cmd => 'ss',
		  },
	  videoBitrate => {
			   cmd => 'b',
		     },
	  videoFrameRate => {
			     cmd => 'r',
			    },
	  videoSize => {
			cmd => 's',
		       },
	  videoAspectRatio => {
			cmd => 'aspect',
		       },
	  videoBitrateTolerance => {
				   cmd => 'bt',
				  },
	  videoMaxBitrate => {
			   cmd => 'maxrate',
			  },
	  videoMinBitrate => {
			   cmd => 'minrate',
			  },
	  videoBufferSize => {
			      cmd => 'bufsize',
			     },
	  videoCodec => {
			 cmd => 'vcodec',
			},
          videoSameQualityAsSource => {
				       cmd => 'sameq',
				      },
	  videoEncodePass =>  {
			       cmd => 'pass',
			      },
	  videoEncodePassLogfile => {
				    cmd => 'passlogfile',
				   },
	  videoVBR => {
		       cmd => 'qscale',
		      },
	  videoMinVBR => {
		       cmd => 'qmin',
		      },
	  videoMaxVBR => {
		       cmd => 'qmax',
		      },
	  videoDiffVBR => {
		       cmd => 'qdiff',
		      },
	  videoBlurVBR => {
		       cmd => 'qblur',
		      },
	  videoCompressionVBR => {
		       cmd => 'qcomp',
		      },
	  videoRCinitComplexity => {
		       cmd => 'rc_init_cplx',
		      },
	  videoBQFactor => {
			    cmd => 'b_qfactor',
			   },
	  videoIQFactor => {
			    cmd => 'i_qfactor',
			   },
	  videoBQOffset => {
			    cmd => 'b_qoffset',
			   },
	  videoIQOffset => {
			    cmd => 'i_qoffset',
			   },
	  videoRCequation => {
			    cmd => 'rc_eq',
			   },
	  videoRCOveride => {
			    cmd => 'rc_override',
			    },
	  videoMotionEstimate => {
				  cmd => 'me_method',
				 },
	  videoDCTAlgoritm => {
			       cmd => 'dct_algo',
			       values => {
					  '0' => 'FF_DCT_AUTO (default)',
					  '1' => 'FF_DCT_FASTINT',
					  '2' => 'FF_DCT_INT',
					  '3' => 'FF_DCT_MMX',
					  '4' => 'FF_DCT_MLIB',
					  '5' => 'FF_DCT_ALTIVEC',
					 },
			      },
	  videoIDCTAlgoritm => {
			       cmd => 'Idct_algo',
				values => {
					   '0' => 'FF_IDCT_AUTO (default)',
					   '1' => 'FF_IDCT_INT', 
					   '2' => 'FF_IDCT_SIMPLE', 
					   '3' => 'FF_IDCT_SIMPLEMMX', 
					   '4' => 'FF_IDCT_LIBMPEG2MMX', 
					   '5' => 'FF_IDCT_PS2', 
					   '6' => 'FF_IDCT_MLIB', 
					   '7' => 'FF_IDCT_ARM', 
					   '8' => 'FF_IDCT_ALTIVEC', 
					   '9' => 'FF_IDCT_SH4', 
					   '10' =>'FF_IDCT_SIMPLEARM',
					  },
			       },
	  videoErrorResilience => {
				   cmd => 'er',
				   values => {
					      '1' => 'FF_ER_CAREFUL (default)',
					      '2' => 'FF_ER_COMPLIANT',
					      '3' => 'FF_ER_AGGRESSIVE',
					      '4' => 'FF_ER_VERY_AGGRESSIVE',					      
					     }
				  },
	  videoErrorConcealment => {
				    cmd => 'ec',
				    values => {
					       '1' => 'FF_EC_GUESS_MVS (default = enabled)', 
					       '2' => 'FF_EC_DEBLOCK (default = enabled)'
					      }
				   },
	  videoUseBFrames => {
			      cmd => 'bf',
			     },
	  videoMacroBlock => {
			      cmd => 'mbd',
			      values => {
					 '0' => 'FF_MB_DECISION_SIMPLE: Use mb_cmp (cannot change it yet in FFmpeg)',
					 '1' => 'FF_MB_DECISION_BITS: Choose the one which needs the fewest bits.',
					 '2' => 'FF_MB_DECISION_RD: rate distortion',
					},
			     },
	  videoUse4MotionVector => {
				    cmd => '4mv',
				   },
	  videoUseDataPartioning => {
				     cmd => 'part',
				    },
	  
	  videoStrictness => {
			      cmd => 'strict',
			     },
	  videoAIC => {
		       cmd => 'aic',
		      },
	  videoUMV => {
		       cmd => 'umv',
		      },
	  videoDeInterlace => {
			       cmd => 'deinterlace',
			      },
	  videoForceILME => {
			     cmd => 'ilme',
			    },
	  audioSamplingFrequency => {
				     cmd => 'ar',
				    },
	  audioBitrate => {
			   cmd => 'ab',
			  },
	  audioChannels => {
			    cmd => 'ac',
			   },
	  audioDisable => {
			    cmd => 'an',
			   },
	  audioCodec => {
			 cmd => 'acodec',
			},
          'threads'  => { cmd => 'threads' },
          'reference_frames' => { cmd => 'refs' },
          'cmp' => { cmd => 'cmp' },
          'loop' => { cmd => 'loop' },
          'deblockalpha' => { cmd => 'deblockalpha' },
          'deblockbeta' => { cmd => 'deblockbeta' },
          'subq' => { cmd => 'subq' },
          'chroma' => { cmd => 'chroma' },
          'slice' => { cmd => 'slice' },
          'parti4x4' => { cmd => 'parti4x4' },
          'partp8x8' => { cmd => 'partp8x8' },
          'level' => { cmd => 'level' },
          'group_picture_size' => { cmd => 'g' },
};
1;
